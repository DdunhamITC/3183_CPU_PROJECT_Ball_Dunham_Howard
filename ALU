using namespace std;
#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>

vector <int> dectofp(float decnum){

vector <int> fp;
vector <int> mant;
vector <int> exponbin;

int inters = floor(abs(decnum));
float frac = abs(decnum) - inters;
int expon;
int fprev;

if(inters >= 1){
    expon = -1;
    while(inters >= 1){
        fprev = inters % 2;
        mant.insert(mant.begin(),fprev);
        inters = inters / 2;
        expon ++;
    }



    for(int i = 0; i < 23 - expon; i++){
        frac = frac * 2;
        if(frac >= 1){
            frac--;
            mant.push_back(1);
        }else{
            mant.push_back(0);
        }
    }

}else{
    expon = 0;
    while(frac < 1){
        frac = frac * 2;
        expon--;
    }
    frac--;
    mant.push_back(1);
    for(int i = 0; i < 23 ; i++){
        frac = frac * 2;
        if(frac >= 1){
            frac--;
            mant.push_back(1);
        }else{
            mant.push_back(0);
        }
    }
    
}

int expon1 = expon + 127;
int exprev;
for(int i = 0; i < 8; i++){
        exprev = expon1 % 2;
        exponbin.insert(exponbin.begin(),exprev);
        expon1 = expon1 / 2;
    }

if(decnum < 0){
    fp.push_back(1);
}else{
    fp.push_back(0);
}

for(int i = 0; i < exponbin.size(); i++){
    fp.push_back(exponbin[i]);
}
for(int i = 1; i < mant.size(); i++){
    fp.push_back(mant[i]);
}

/*    for(int i = 0; i < mant.size(); i++){
        cout << mant[i] << " ";
    }
    
    for(int i = 0; i < exponbin.size(); i++){
        cout << exponbin[i] << " ";
    }
    
    for(int i = 0; i < fp.size(); i++){
        cout << fp[i] << " ";
    }
    cout << endl;
*/

return fp; 
}

float fptodec(vector <int> fpin){

int sign;
if(fpin[0] == 1)
    {     sign = -1;   }
    else
    {     sign = 1;    }
    
    int expon = -127;
    
    int exponpower = 7;
    for(int i = 1; i < 9; i++)
    {
        expon = expon + fpin[i]*pow(2,exponpower);
        exponpower--;
    }
    
    float val;
    val = pow(2,expon);
    
    
    for(int i = 9; i < 32; i++){
        expon--;
        val = val + (fpin[i]* pow(2,expon));
        
    }
    
    val = val * sign;
    
    return val;
    
}

vector <int> alu(vector <int> instruc, vector <int> reg1, vector <int> reg2){
    
    int opcode = 1;
    for(int i = 0; i < 5; i++){
        opcode = opcode + instruc[i]*pow(2,4-i);
    }
    
    float decreg1 = fptodec(reg1);
    float decreg2 = fptodec(reg2);
    vector <int> result;
    
    switch(opcode){
        case 5:
        // Add
        break;
        case 6:
        // Subtract
        break;
        case 7:
        // Negate
        break;
        case 8:
        // Multiply
        result = dectofp(decreg1 * decreg2);
        break;
        case 9:
        // Divide
        result = dectofp(decreg1 / decreg2);
        break;
        case 10:
        // Floor
        break;
        case 11:
        // Ceiling
        break;
        case 12:
        // Round
        break;
        case 13:
        // Abs
        break;
        case 14:
        // Min
        break;
        case 15:
        // Max
        break;
        case 16:
        // Power
        result = dectofp(pow(decreg1,decreg2));
        break;
        case 17:
        // Exponential
        result = dectofp(exp(decreg1));
        break;
        case 18:
        // Square Root
        result = dectofp(sqrt(decreg1));
        break;
        case 24:
        // And 
        for(int i = 0; i < 32; i++){
            result.push_back(reg1[i] * reg2[i]);
        }
        break;
        case 25:
        // OR
        for(int i = 0; i < 32; i++){
            result.push_back(max(reg1[i],reg2[i]));
        }
        break;
        case 26:
        // XOR
        for(int i = 0; i < 32; i++){
           if(reg1[i] == 0){
               if(reg2[i] == 0){
                    result.push_back(0);
                }else{
                    result.push_back(1);
                }
            }else{
                if(reg2[i] == 0){
                    result.push_back(1);
                }else{
                    result.push_back(0);
                }   
            }
        }
        break;
        case 27:
        // NOT
        for(int i = 0; i < 32; i++){
            if(reg1[i] == 0){
                result.push_back(1);
            }else{
                result.push_back(0);
            }
        }
        break;
        case 28:
        // NAND
        for(int i = 0; i < 32; i++){
            if((reg1[i]*reg2[1]) == 1){
                result.push_back(0);
            }else{
                result.push_back(1);
            }
        }
        break;
        case 29:
        // NOR
        for(int i = 0; i < 32; i++){
            if((reg1[i]==0) && (reg2[i]==0)){
                result.push_back(1);
            }else{
                result.push_back(0);
            }
        }
        break;
        case 30:
        // XNOR
        for(int i = 0; i < 32; i++){
            if(reg1[1] == 0){
                if(reg2[i] == 0){
                    result.push_back(1);
                }else{
                    result.push_back(0);
                }
            }else{
                if(reg2[i] == 0){
                    result.push_back(0);
                }else{
                    result.push_back(1);
                }
            }
        }
        break;
        case 31:
        // Shift Left
        for(int i = 0; i < fptodec(reg2); i++){
            reg1.push_back(0);
        }
        for(int i = 0; i < 32; i++){
            result.push_back(reg1[i + fptodec(reg2)]);
        }
        result.resize(32);
        break;
        case 32:
        // Shift Right
        result = reg1;
        for(int i = 0; i < fptodec(reg2); i++){
            result.insert(result.begin(),0);
        }
        result.resize(32);
        break;
        
        default:
        break;
        
    }
    
    
    return result;
    
    
}

int main()
{
    vector <int> opcode;
    vector <int> reg1;
    vector <int> reg2;
    
    opcode.push_back(1);
    opcode.push_back(0);
    opcode.push_back(0);
    opcode.push_back(0);
    opcode.push_back(0);
    
    reg1 = dectofp(19.5672);
    reg2 = dectofp(1000542.32);
    
    for(int i = 0; i < 32; i ++){
        cout << reg1[i] << " ";
    }
    cout << endl;
    for(int i = 0; i < 32; i ++){
        cout << reg2[i] << " ";
    }
    cout << endl;
    
    vector <int> aluresult;
    aluresult = alu(opcode, reg1, reg2);
    
    for(int i = 0; i < 32; i++){
        cout << aluresult[i] << " ";
    }
    
    cout << endl << fptodec(aluresult);

    return 0;
}
