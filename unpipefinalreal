using namespace std;
#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>

    float fptodec(vector <int> fpin){

int checkforzero = 0;
for(int i = 0; i < 32; i++){
    if(fpin[i] == 1){
        checkforzero++;
    }
}

if(checkforzero == 0){
    float val = 0;
    return val;
}

int sign;
if(fpin[0] == 1)
    {     sign = -1;   }
    else
    {     sign = 1;    }
    
    int expon = -127;
    
    int exponpower = 7;
    for(int i = 1; i < 9; i++)
    {
        expon = expon + fpin[i]*pow(2,exponpower);
        exponpower--;
    }
    
    float val;
    val = pow(2,expon);
    
    for(int i = 9; i < 32; i++){
        expon--;
        val = val + (fpin[i]* pow(2,expon));
        
    }
    
    val = val * sign;
    
    return val;
}
    vector <int> dectofp(float decnum){

vector <int> fp;
vector <int> mant;
vector <int> exponbin;

if(decnum == 0){
    for(int i = 0; i < 32; i++){
        fp.push_back(0);
    }
    return fp;
}

int inters = floor(abs(decnum));
float frac = abs(decnum) - inters;
int expon;
int fprev;

if(inters >= 1){
    expon = -1;
    while(inters >= 1){
        fprev = inters % 2;
        mant.insert(mant.begin(),fprev);
        inters = inters / 2;
        expon ++;
    }



    for(int i = 0; i < 23 - expon; i++){
        frac = frac * 2;
        if(frac >= 1){
            frac--;
            mant.push_back(1);
        }else{
            mant.push_back(0);
        }
    }

}else{
    expon = 0;
    while(frac < 1){
        frac = frac * 2;
        expon--;
    }
    frac--;
    mant.push_back(1);
    for(int i = 0; i < 23 ; i++){
        frac = frac * 2;
        if(frac >= 1){
            frac--;
            mant.push_back(1);
        }else{
            mant.push_back(0);
        }
    }
    
}

int expon1 = expon + 127;
int exprev;
for(int i = 0; i < 8; i++){
        exprev = expon1 % 2;
        exponbin.insert(exponbin.begin(),exprev);
        expon1 = expon1 / 2;
    }

if(decnum < 0){
    fp.push_back(1);
}else{
    fp.push_back(0);
}

for(int i = 0; i < exponbin.size(); i++){
    fp.push_back(exponbin[i]);
}
for(int i = 1; i < mant.size(); i++){
    fp.push_back(mant[i]);
}

return fp; 
}
    vector <int> full_addCOMP(vector <int> fpa,vector <int> fpb );
//{
    
    
    vector <int> fpFloor (vector <int> a)
    {
        int exA=0;
        if (a[0]==0)
            {
                for (int i = 8 ; i > 0 ; i--)
                    {
                        exA = exA + a[i]*pow(2,8-i);
                    }
                int ex = 127-exA;
                for (int i = 8+ex; i < 32;i++)
                    {
                        a[i]=0;
                    }
            }
            return a;
    }
    
     int fullADDS(int a, int b, int c)// just a case statement built from truth tables for both add and subtract
    {
        int sum;
        int car;
        if (a==1&&b==1&&c==1)
            {
                sum=1;
                car=1;
            }
        else if (a==1&&b==1&&c==0)
            {
                sum=0;
                car=1;
            }

        else if (a==1&&b==0&&c==1)
            {
                sum=0;
                car=1;
            }

        else if (a==1&&b==0&&c==0)
            {
                sum=1;
                car=0;
            }
        else if (a==0&&b==1&&c==1)
            {
                sum=0;
                car=1;
            }
        else if (a==0&&b==1&&c==0)
            {
                sum=1;
                car=0;
            }
        
        else if (a==0&&b==0&&c==1)
            {
                sum=1;
                car=0;
            }
        
        else
            {
                sum=0;
                car=0;
            }
        
        return sum;
    }
    int fullADDC(int a, int b, int c)
    {
        int sum;
        int car;
        if (a==1&&b==1&&c==1)
            {
                sum=1;
                car=1;
            }
        else if (a==1&&b==1&&c==0)
            {
                sum=0;
                car=1;
            }

        else if (a==1&&b==0&&c==1)
            {
                sum=0;
                car=1;
            }

        else if (a==1&&b==0&&c==0)
            {
                sum=1;
                car=0;
            }
        else if (a==0&&b==1&&c==1)
            {
                sum=0;
                car=1;
            }
        else if (a==0&&b==1&&c==0)
            {
                sum=1;
                car=0;
            }
        
        else if (a==0&&b==0&&c==1)
            {
                sum=1;
                car=0;
            }
        
        else
            {
                sum=0;
                car=0;
            }
        
        return car;
    }

    int fullSUBD(int a, int b, int c)
    {
        int sum;
        int car;
        if (a==1&&b==1&&c==1)
            {
                sum=1;
                car=1;
            }
        else if (a==1&&b==1&&c==0)
            {
                sum=0;
                car=0;
            }

        else if (a==1&&b==0&&c==1)
            {
                sum=0;
                car=0;
            }

        else if (a==1&&b==0&&c==0)
            {
                sum=1;
                car=0;
            }
        else if (a==0&&b==1&&c==1)
            {
                sum=0;
                car=1;
            }
        else if (a==0&&b==1&&c==0)
            {
                sum=1;
                car=1;
            }
        
        else if (a==0&&b==0&&c==1)
            {
                sum=1;
                car=1;
            }
        
        else
            {
                sum=0;
                car=0;
            }
        
        return sum;
    }

    int fullSUBB(int a, int b, int c)
    {
        int sum;
        int car;
        if (a==1&&b==1&&c==1)
            {
                sum=1;
                car=1;
            }
        else if (a==1&&b==1&&c==0)
            {
                sum=0;
                car=0;
            }

        else if (a==1&&b==0&&c==1)
            {
                sum=0;
                car=0;
            }

        else if (a==1&&b==0&&c==0)
            {
                sum=1;
                car=0;
            }
        else if (a==0&&b==1&&c==1)
            {
                sum=0;
                car=1;
            }
        else if (a==0&&b==1&&c==0)
            {
                sum=1;
                car=1;
            }
        
        else if (a==0&&b==0&&c==1)
            {
                sum=1;
                car=1;
            }
        
        else
            {
                sum=0;
                car=0;
            }
        
        return car;
    }
   
   vector <int> neg (vector <int> a)
    {
        if (a[0]==1)
            a[0]=0;
        else
            a[0]=1;
    
        return a;
    }
    vector <int> fpCeling (vector<int>a)
    {   
        vector <int > flr;
        vector <int > cel;
        flr=fpFloor(a);
        cel=full_addCOMP(flr, dectofp(1));
        return cel;
    }
    
    vector <int> full_addCOMP(vector <int> fpa,vector <int> fpb )  

    //int main()
    {
        int sig;
        // vector <int> fpa ;
        // vector <int> fpb ;
        vector <int> a ;
        vector <int> b ;

        //fpa = dectofp(8);
        //fpb = dectofp(8);

        

        for (int i = 8 ; i < 32 ; i++)
            {
                if (i == 8)
                    {
                        a.push_back(0);
                        b.push_back(0);
                        a.push_back(1);
                        b.push_back(1);
                    }
                else
                    {
                        a.push_back(fpa[i]);
                        b.push_back(fpb[i]);
                    }
            }
             

        vector <int> exA;
        vector <int> exB;

        for (int i = 1 ; i < 9 ; i++)
            {
                exA.push_back(fpa[i]);
                exB.push_back(fpb[i]);
            }
        if (fpa[0]==1 || fpb[0]==1)
            sig =1 ;
        else
            sig = 0;
        vector <int> exANS {0,0,0,0,0,0,0,0};
        
        int exINA=0;
        int exINB=0;
        int exINF=0;
        int shift=0;
                
                // getting exponet for final and shift
                int power=0;
                for (int i = exA.size()-1; i >=0 ; i--)
                    {
                            
                            exINA= exINA+exA[i]*pow(2,power);
                            
                            power= power+1;
                            
                    }
                
                power =0;
                for (int i = exA.size()-1; i >=0 ; i--)
                    {
                            
                            exINB= exINB+exB[i]*pow(2,power);
                            power= power+1;
                            
                    }
                if (exINA > exINB)
                    {
                        exINF=exINA;
                    shift= exINA-exINB;
                    for (int i; i < shift ;i++)
                        {
                            b.insert(b.begin(), 0);
                        }
                    b.resize(24);
                    }
                else
                    {
                        exINF=exINB;
                    shift = exINB-exINA;
                    for (int i; i < shift ;i++)
                        {
                            a.insert(a.begin(), 0);
                        }
                    
                    a.resize(24);   
                    }
                    // cout << exINA << " " << exINB << " " << exINF<< endl;
                    // cout << shift << endl;
                    
                
                
                vector <int> c;
                
                int ex = 0;
                        c.push_back(0);
        
                       
        
        int carry = 0;
        
        vector <int> ans{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
        int oF;

        if (sig == 1)
            {
                for (int i = ans.size()-1; i >=0;i--)
                {
                
                    if (i==0)
                    {
                        ans[i]=fullSUBD(0,0,carry);
                        oF=fullSUBB(0,0,carry);
                    }
                    else
                    {
                        ans[i]=fullSUBD(a[i-1],b[i-1],carry);
                        carry=fullSUBB(a[i-1],b[i-1],carry);
                    }
                    
                }
                    
                    
                    for (int i = 0 ; i < a.size() ; i++)
                        {if ((a[(a.size()-1)-i]+b[(a.size()-1)-i]+c[i])>1)
                        c.push_back(1);
                         else
                        c.push_back(0);}
                        if (c.at((a.size()-1))==0)
                            exINF=exINF-1;
                        cout << exINF << endl;
                    for (int i=7 ; i >=0 ; i--)
                {
                    exANS[i]=exINF%2;
                    exINF=exINF/2;
                    
                }
                    
                    
               ans.erase(ans.begin()); 
            }
        
        else
            {
                for (int i = ans.size()-1; i >=0;i--)
                {
                
                    if (i==0)
                    {
                        ans[i]=fullADDS(0,0,carry);
                        oF=fullADDC(0,0,carry);
                    }
                    else
                    {
                        ans[i]=fullADDS(a[i-1],b[i-1],carry);
                        carry=fullADDC(a[i-1],b[i-1],carry);
                    }
                }
                
                        for (int i = 0 ; i < a.size() ; i++)
                        {if ((a[(a.size()-1)-i]+b[(a.size()-1)-i]+c[i])>1)
                        c.push_back(1);
                         else
                        c.push_back(0);}
                        if (c.at((a.size()-1))==1)
                            exINF=exINF+1;
                        //cout << exINF << endl;
                    for (int i=7 ; i >=0 ; i--)
                {
                    exANS[i]=exINF%2;
                    exINF=exINF/2;
                    
                }
                    
            }

                
            

            

        

            ans.erase(ans.begin());
            ans.erase(ans.begin());
        for (int i = 0 ; i < ans.size();i++)
            {
                // cout<< ans[i] ;
            }
            
            // cout <<endl << ans.size() << endl;

            for (int i = 0 ; i < exANS.size();i++)
            {
                // cout<< exANS[i] ;
            }
            // cout <<endl << exANS.size() << endl;

        
        vector <int> recombo;
        for (int i = 0 ; i <32 ;i++)
            {
                if (i==0)
                    {
                        recombo.push_back(sig);
                    }
                else if (i>0 && i<9)
                    {
                        recombo.push_back(exANS[i-1]);
                    }
                else
                    {
                        recombo.push_back(ans[i-9]);
                    }
                
            }
            
            /* for ( int i =0 ; i < 32 ; i++)
                {
                    // cout << recombo[i];
                }
                cout << endl; */
        
        
        return recombo;
    }
    
    vector <int> fpRound (vector<int>a)
    {   
        
        vector <int > flr;
        flr=fpFloor(a);
        int exA=0;
       
                for (int i = 8 ; i > 0 ; i--)
                    {
                        exA = exA + a[i]*pow(2,8-i);
                    }
                int ex = 127-exA;
                    if (a[ex+8]=1)
                        return full_addCOMP(flr,dectofp(1));
                    else
                        return flr;
    }
    
    vector <int> absV (vector <int> a)
    {
        if (a[0]==1)
            a[0]=0;
        else
            a[0]=0;
    
        return a;
    }
    vector <int> fpMax (vector <int > flra, vector <int > flrb)
    {   
        vector <int > flr;
        
        flrb[0]=1;
        flr=full_addCOMP(flra,flrb);
        if (flr[0]==0)
            return flra;
        else
        {
            return flrb;
        }
        
        
    }
    
    vector <int> fpMin (vector <int > flra, vector <int > flrb)
    {   
        vector <int > flr;
        
        flrb[0]=1;
        flr=full_addCOMP(flra,flrb);
        if (flr[0]==1)
            return flra;
        else
        {
            return flrb;
        }
        
        
    }
    
//}
int cycle = 0;
int stpprgm = 0;
int regwrite = 0;
int PC = 0;
int register2write = 0;
int branchcount = 0;

float reg[16] = {0};
float memory[1024] = {0};

//Test Instructions 1
/*int instructionset[80][8] = {{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{1,0,0,0,1,0,1,0},{1,0,0,0,1,0,1,0},//Set R0 ins 
                             {0,1,0,0,0,0,1,0},{1,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R0 val
                             {0,0,0,0,1,0,0,0},{0,1,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Load R1
                             {0,0,0,0,0,0,0,0},{1,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R2
                             {0,1,0,0,0,0,0,1},{1,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R2 val
                             {0,0,0,0,0,0,0,0},{1,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R3
                             {0,1,0,0,0,0,0,0},{1,1,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R3 Val
                             {0,0,0,0,0,0,0,1},{0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R4
                             {0,1,0,0,0,0,1,1},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R4 Val
                             {0,0,1,1,1,0,0,1},{0,1,0,0,0,1,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//R5 = R2 * R0
                             {0,0,1,1,1,0,0,1},{1,0,0,0,0,1,1,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//R6 = R3 * R0
                             {0,1,0,0,0,0,0,1},{1,1,0,0,1,1,0,0},{0,1,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},//R7 = R6 / R5
                             {0,0,0,0,0,0,1,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R8
                             {0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R8 Val
                             {0,0,0,0,0,0,1,0},{0,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R9
                             {0,0,1,1,1,1,1,1},{1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R9 Val
                             {0,0,1,0,1,0,1,0},{1,0,0,1,0,0,0,0},{1,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},//R10 = R8 - R9
                             {0,0,1,0,0,0,1,0},{0,1,0,1,0,0,1,0},{1,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},//R9 = R9 + R9
                             {1,0,1,0,0,0,0,0},{0,0,0,1,0,1,0,0},{1,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//CBNeg R10
                             {1,0,1,1,0,0,0,0},{1,0,1,1,0,0,0,1},{1,0,0,0,0,0,0,0},{1,0,0,0,1,0,1,0}};//Halt
*/                             
//Test Instructions 2
int instructionset[60][8] = {{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{1,0,0,0,1,0,1,0},{1,0,0,0,1,0,1,0},//Set R0 ins 
                             {0,1,0,0,0,1,0,1},{1,0,1,0,0,1,0,1},{0,1,1,0,0,0,1,1},{1,0,1,0,1,1,1,0},//Set R0 val
                             {0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R1
                             {0,0,1,1,1,1,1,1},{1,1,0,0,1,1,1,0},{0,0,0,1,0,1,0,0},{0,1,1,1,1,0,1,1},//Set R1 val
                             {0,0,1,1,1,0,0,0},{1,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},//R2 = R1 * R0
                             {0,1,0,1,0,0,0,0},{1,1,0,0,0,1,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//R3 = Ceil(R2)
                             {1,0,1,0,1,0,0,0},{1,1,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//NO-OP
                             {1,0,1,0,0,0,0,0},{1,1,0,0,0,1,1,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Branch Neg
                             {0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R4
                             {0,1,0,0,0,0,1,0},{0,1,0,0,0,1,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R4 Val
                             {0,1,1,0,1,0,0,1},{0,1,0,0,0,1,1,0},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//R5 = min(R3,R4)
                             {0,0,0,0,0,0,1,0},{1,0,0,0,1,1,0,0},{0,1,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R10
                             {0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},//Set R10 Val
                             {1,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,1},{1,1,1,1,1,1,1,1},{1,1,0,0,1,0,0,0},//Branch Unconditional
                             {1,0,1,1,0,0,0,0},{1,0,1,1,0,0,0,1},{1,0,0,0,0,0,0,0},{1,0,0,0,1,0,1,0}};//Halt

vector <int> setval;
vector <int> regdisplay;






//float alu(int opnum, float decreg1, float decreg2){


float alu(int opnum, float decreg1, float decreg2){

    vector <int> fpreg1 = dectofp(decreg1);
    vector <int> fpreg2 = dectofp(decreg2);
    vector <int> fpresult;
    float result = decreg1;
    switch(opnum){
        case 5:
        // Add
        result = decreg1 + decreg2;
        result = fptodec(full_addCOMP(fpreg1,fpreg2));
        break;
        case 6:
        // Subtract
        result = decreg1 - decreg2;
        if(abs(decreg1)<abs(decreg2)){
            float temp = decreg1;
            decreg1 = decreg2;
            decreg2 = temp * - 1;
        }
        decreg2 = decreg2 * -1;
        //result = fptodec(full_addCOMP(fpreg1,fpreg2));
        break;
        case 7:
        // Negate
        result = fptodec(neg(fpreg1));
        break;
        case 8:
        // Multiply
        result = decreg1 * decreg2;
        break;
        case 9:
        // Divide
        result = decreg1 / decreg2;
        break;
        case 10:
        // Floor
        result = fptodec(fpFloor(fpreg1));
        break;
        case 11:
        // Ceiling
        result = ceil(decreg1);
        break;
        case 12:
        // Round
        result = fptodec(fpRound(fpreg1)); //round(decreg1);
        break;
        case 13:
        // Abs
        result =fptodec(absV(fpreg1)); //abs(decreg1);
        break;
        case 14:
        // Min
        if(decreg1 > decreg2){
            result = decreg2;
        } else{
            result = decreg1;
        }
        break;
        case 15:
        // Max
        if(decreg1 < decreg2){
            result = decreg2;
        } else{
            result = decreg1;
        }
        
        break;
        case 16:
        // Power
        result = pow(decreg1,decreg2);
        break;
        case 17:
        // Exponential
        result = exp(decreg1);
        break;
        case 18:
        // Square Root
        result = sqrt(decreg1);
        break;
        case 24:
        // And 
        for(int i = 0; i < 32; i++){
            fpresult.push_back(fpreg1[i] * fpreg2[i]);
        }
        break;
        case 25:
        // OR
        for(int i = 0; i < 32; i++){
            fpresult.push_back(max(fpreg1[i],fpreg2[i]));
        }
        break;
        case 26:
        // XOR
        for(int i = 0; i < 32; i++){
           if(fpreg1[i] == 0){
               if(fpreg2[i] == 0){
                    fpresult.push_back(0);
                }else{
                    fpresult.push_back(1);
                }
            }else{
                if(fpreg2[i] == 0){
                    fpresult.push_back(1);
                }else{
                    fpresult.push_back(0);
                }   
            }
        }
        break;
        case 27:
        // NOT
        for(int i = 0; i < 32; i++){
            if(fpreg1[i] == 0){
                fpresult.push_back(1);
            }else{
                fpresult.push_back(0);
            }
        }
        break;
        case 28:
        // NAND
        for(int i = 0; i < 32; i++){
            if((fpreg1[i]*fpreg2[i]) == 1){
                fpresult.push_back(0);
            }else{
                fpresult.push_back(1);
            }
        }
        break;
        case 29:
        // NOR
        for(int i = 0; i < 32; i++){
            if((fpreg1[i]==0) && (fpreg2[i]==0)){
                fpresult.push_back(1);
            }else{
                fpresult.push_back(0);
            }
        }
        break;
        case 30:
        // XNOR
        for(int i = 0; i < 32; i++){
            if(fpreg1[1] == 0){
                if(fpreg2[i] == 0){
                    fpresult.push_back(1);
                }else{
                    fpresult.push_back(0);
                }
            }else{
                if(fpreg2[i] == 0){
                    fpresult.push_back(0);
                }else{
                    fpresult.push_back(1);
                }
            }
        }
        break;
        case 31:
        // Shift Left
        for(int i = 0; i < decreg2; i++){
            fpreg1.push_back(0);
        }
        for(int i = 0; i < 32; i++){
            fpresult.push_back(fpreg1[i + decreg2]);
        }
        fpresult.resize(32);
        result = fptodec(fpresult);
        break;
        case 32:
        // Shift Right
        fpresult = fpreg1;
        for(int i = 0; i < decreg2; i++){
            fpresult.insert(fpresult.begin(),0);
        }
        fpresult.resize(32);
        result = fptodec(fpresult);
        break;
        
        default:
        break;
        
    }
    return result;
}

void execute(vector <int> instruction){
    
    cycle++;
    PC = PC +4;
    
    vector <int> control;
    vector <int> ins2622;
    vector <int> ins2117;
    vector <int> ins1612;
    vector <int> ins160;
    
    control.clear();
    ins2622.clear();
    ins2117.clear();
    ins1612.clear();
    ins160.clear();
    
    for(int i = 0; i < 5; i++){
        control.push_back(instruction[i]);
    }
    for(int i = 5; i < 10; i++){
        ins2622.push_back(instruction[i]);
    }
    for(int i = 10; i < 15; i++){
        ins2117.push_back(instruction[i]);
    }
    for(int i = 15; i < 20; i++){
        ins1612.push_back(instruction[i]);
    }
    for(int i = 15; i < 32; i++){
        ins160.push_back(instruction[i]);
    }
    
    
    
    float decimmediate = -1*pow(2,16)*ins160[0];
    for(int q = 1; q < 17; q++){
        decimmediate = decimmediate + ins160[q]*pow(2,16-q);
    }
    
    int cntrl = 1;
    int dec2622 = 0;
    int dec2117 = 0;
    int dec1612 = 0;
    
    for(int i = 0; i < 5; i++){
        cntrl = cntrl + control[4-i] * pow(2,i);
        dec2622 = dec2622 + ins2622[4-i] * pow(2,i);
        dec2117 = dec2117 + ins2117[4-i] * pow(2,i);
        dec1612 = dec1612 + ins1612[4-i] * pow(2,i);
    }
    register2write = dec2622;
    
    int reg2loc   = 0;
    int branchU   = 0;
    int branchZ   = 0;
    int branchN   = 0;
    int mem2read  = 0;
    int mem2reg   = 0;
    int memwrite  = 0;
    int alusrc    = 0;
    regwrite      = 0;
    int set       = 0;
    int p = 0;
    cout << "For Cycle # " << cycle << endl;
    cout << "The instruction is ";
    switch(cntrl){
        case 1:
        cout << "SET" << endl;
        regwrite = 1;
        set = 1;
        setval.clear();
        int setarray[32];
        p = 0;
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 8; j++){
                setarray[p] = instructionset[PC + i][j];
                p++;
            }
        }
        for(int i = 0; i < 32; i++){
            setval.push_back(setarray[i]);
        }
        reg[register2write] = fptodec(setval);
        PC = PC + 4;
        break;
        case 2:
        cout << "LOAD" << endl;
        reg2loc = 1;
        mem2read = 1;
        mem2reg = 1;
        alusrc = 1;
        regwrite = 1;
        break;
        case 3:
        cout << "STORE" << endl;
        memwrite = 1;
        alusrc = 1;
        break;
        case 4:
        cout << "MOVE" << endl;
        regwrite = 1;
        break;
        case 5:
        cout << "ADD" << endl;
        regwrite = 1;
        break;
        case 6:
        cout << "Subtract" << endl;
        regwrite = 1;
        break;
        case 7:
        cout << "NEGATE" << endl;
        regwrite = 1;
        break;
        case 8:
        cout <<  "Multiply" << endl;
        regwrite = 1;
        break;
        case 9:
        cout <<  "Divide" << endl;
        regwrite = 1;
        break;
        case 10:
        cout << "Floor" << endl;
        regwrite = 1;
        break;
        case 11:
        cout << "Ceiling" << endl;
        regwrite = 1;
        break;
        case 12:
        cout << "Round" << endl;
        regwrite = 1;
        break;
        case 13:
        cout << "Absolute Value" << endl;
        regwrite = 1;
        break;
        case 14:
        cout << "Min" << endl;
        regwrite = 1;
        break;
        case 15:
        cout << "Max" << endl;
        regwrite = 1;
        break;
        case 16:
        cout << "Power" << endl;
        regwrite = 1;
        alusrc = 1;
        break;
        case 17:
        cout << "Exponential" << endl;
        regwrite = 1;
        break;
        case 18:
        cout << "Square Root" << endl;
        regwrite = 1;
        break;
        case 19:
        cout << "Branch Unconditional" << endl;
        branchU = 1;
        break;
        case 20:
        cout << "Branch Zero" << endl;
        branchZ = 1;
        break;
        case 21:
        cout << "Branch Neg" << endl;
        branchN = 1;
        break;
        case 22:
        cout << "No-op" << endl;
        
        break;
        case 23:
        cout << "HALT" << endl;
        stpprgm = 1;
        break;
        case 24:
        cout << "And" << endl; 
        regwrite = 1;
        break;
        case 25:
        cout << "OR" << endl;
        regwrite = 1;
        break;
        case 26:
        cout << "XOR" << endl;
        regwrite = 1;
        break;
        case 27:
        cout << "NOT" << endl;
        regwrite = 1;
        break;
        case 28:
        cout << "NAND" << endl;
        regwrite = 1;
        break;
        case 29:
        cout << "NOR" << endl;
        regwrite = 1;
        case 30:
        cout << "XNOR" << endl;
        regwrite = 1;
        break;
        case 31:
        cout << "Shift Left" << endl;
        regwrite = 1;
        alusrc = 1;
        break;
        case 32:
        cout << "Shift Right" << endl;
        regwrite = 1;
        alusrc = 1;
        break;
        
        default:
        break;
    }
    
    int readreg1 = dec2117;
    int readreg2 = dec1612;
    if(reg2loc == 1){
        int readreg2 = dec2622;
    }
    
    register2write = dec2622;
    
    float alusrc1 = reg[readreg1];
    float alusrc2;
    if(alusrc == 0){
       alusrc2 = reg[readreg2]; 
    }else{
       alusrc2 = decimmediate;
    }
    
    float aluresult = alu(cntrl, alusrc1, alusrc2);
    
    int branchneg = 0;
    int branchzero = 0;
    
    if(aluresult < 0){
        branchneg = 1;
    }
    if(aluresult == 0){
        branchzero = 1;
    }
    
    int aluresultint = aluresult /1;
    if(memwrite == 1){
        memory[aluresultint] = reg[readreg2];
    }
    if((regwrite == 1) && (set == 0)){
        
            if(mem2reg == 1){
                reg[register2write] = memory[aluresultint];
            }else if(set != 1){
                reg[register2write] = aluresult;
            }
    }
    for(int i = 0; i < 16; i++){
        cout << "Register " << i << " = " << reg[i] << ". Floating Point equivalent of ";
        regdisplay.clear();
        regdisplay = dectofp(reg[i]);
        for(int j = 0; j < 32; j++){
            cout << regdisplay[j] << " ";
        }
        cout << endl;
    }
    cout << "reg2loc = " << reg2loc << endl;
    cout << "branchU = " << branchU << endl;
    cout << "branchZ = " << branchZ << endl;
    cout << "branchN = " << branchN << endl;
    cout << "mem2read = "<< mem2read << endl;
    cout << "mem2reg = " << mem2reg << endl;
    cout << "memwrite = "<< memwrite << endl;
    cout << "alusrc = "  << alusrc << endl;
    cout << "regwrite = "<< regwrite << endl;
    
    if((branchU == 1 ||(branchzero*branchZ) == 1||(branchneg*branchN) == 1) && branchcount == 0){
        PC = PC + decimmediate;
        cout << decimmediate << endl;
        branchcount++;
    }
}


int main()
{
    for(int i = 0; i < 16; i++){
        reg[i] = rand() % 1000;
    }
    for(int i = 0; i < 1024; i++){
        memory[i] = rand() % 1000;
    }
    memory[100] = 3.14159;
    
    int instructionread[32];
    vector <int> insorset;
    while(stpprgm == 0){
        int k = 0;
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 8; j++){
                instructionread[k] = instructionset[PC + i][j];
                k++;
            }
        }
        insorset.resize(0);
        for(int i = 0; i < 32; i++){
            insorset.push_back(instructionread[i]);
        }
        
        execute(insorset);
        
    }

    return 0;
}
